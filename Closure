#Closure
1.Closure is when a function remember its lexical scope even when the function executed outside the lexical scope

function foo(){
    var bar = "Its me"
    return function(){
           console.log(bar);
    }
}
foo()//It will return function
foo()();//console.log will get printed


2.for(var i=0;i<5;i++){
     setTimeOut(function(){
       console.log(i);
     },i*1000); 
  }
output:- 4,4,4,4,4
//all SetTimeOut function will get store in stack queue and when event queue will get empty after event loop get over to push functions in event queue...when setTimeOut function get executed ...it point to variable i whose value is 10     

for(var i=0;i<5;i++){
   (function(i){
      setTimeOut(function(){
       console.log(i);
     },i*1000);
    })(i)
}
IIFE have its own scope and i attached to it ....so it will print.
output:-0,1,2,3,4

or

for(let i=0;i<10;i++){
  setTimeOut(function(){
       console.log(i);
     },i*1000);
}






